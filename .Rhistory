color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Tapaku")) +
theme_void() +
ggpubr::theme_transparent()
df %>%
#filter(stkreds %in% c("Sydjylland", "Vestjylland", "Østjylland", "Nordjylland")) %>%
filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = stkreds),
color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Takapu")) +
theme_void() +
ggpubr::theme_transparent()
df %>%
#filter(stkreds %in% c("Sydjylland", "Vestjylland", "Østjylland", "Nordjylland")) %>%
filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = stkreds),
color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Takahe")) +
theme_void() +
ggpubr::theme_transparent()
df %>%
#filter(stkreds %in% c("Sydjylland", "Vestjylland", "Østjylland", "Nordjylland")) %>%
filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = stkreds),
color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Takahe"),
name = "") +
theme_void() +
ggpubr::theme_transparent()
library(voters)
df <- getPS()
df
class(df)
library(ggplot2)
library(Manu)
library(ggpubr)
df %>%
filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = stkreds),
color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Takahe"),
name = "") +
theme_void()
library()
library(devtools)
devtools::install_github("jvieroe/voters")
library(voters)
df %>%
#filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = stkreds),
color = "grey90",
size = .0000000001) +
# scale_fill_manual(values = Manu::get_pal("Takahe"),
#                     name = "") +
theme_void()
3604-3189
library(devtools)
library(roxygen2)
document()
document()
?read.csv
getwd()
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr))
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
## code to prepare `DATASET` dataset goes here
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr))
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id)
usethis::use_data(vs, overwrite = TRUE, internal = TRUE)
## code to prepare `DATASET` dataset goes here
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble()
usethis::use_data(vs, overwrite = TRUE, internal = TRUE)
vs
document()
## code to prepare `DATASET` dataset goes here
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble()
usethis::use_data(vs, overwrite = TRUE, internal = TRUE)
document()
rm(vs)
voters::vs
library(devtools)
library(roxygen2)
usethis::use_pipe()
document()
document()
library(badger)
badger::badge_last_commit()
badger::badge_last_commit("https://github.com/jvieroe/voters")
library(devtools)
devtools::install_github("jvieroe/voters")
library(voters)
df <- getPS()
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble()
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble::tibble()
View(vs)
usethis::use_data(vs, overwrite = TRUE, internal = FALSE)
## code to prepare `DATASET` dataset goes here
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble::tibble()
usethis::use_data(vs, overwrite = TRUE, internal = FALSE)
document()
#' Polling station data
#'
#' Polling station data with IDs. Collected from \url{https://valgdatabase.dst.dk/?lang=en}
#'
#' @format A `tibble` with 1,384 rows and 3 columns
"vs"
document()
library(devtools)
devtools::install_github("jvieroe/voters")
library(voters)
df <- getPS()
docum
document()
library(devtools)
devtools::install_github("jvieroe/voters")
library(voters)
df <- getPS()
df
library(ggplot2)
library(Manu)
library(ggpubr)
df %>%
#filter(stkreds %in% c("København", "Københavns Omegn")) %>%
ggplot(data = .) +
geom_sf(aes(fill = regi),
color = "grey90",
size = .0000000001) +
scale_fill_manual(values = Manu::get_pal("Takahe"),
name = "") +
theme_void() +
ggpubr::theme_transparent()
table(is.na(df$ps_id))
df %>%
janitor::tabyl(is.na(ps_id))
df %>%
janitor::tabyl(is.na(.$ps_id))
table(is.na(df$ps_id))
df %$%
janitor::tabyl(is.na(.$ps_id))
df %>%
janitor::tabyl(is.na(.$ps_id))
check()
document()
check()
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b")
)
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.), c("q"))))
df
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.), c("q"))))
df
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.data), c("q"))))
df
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.data), c("q"))))
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.), c("q"))))
df
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(.), c("q"))))
df
df <- tibble(
a = c(1, 2, 3),
v = c("a", "a", "b"),
q = c("x", "a", "b")
)
df
df <- df %>%
dplyr::select(c("q",
base::setdiff(names(df), c("q"))))
df
rm(df)
document()
check()
document()
check()
document()
check()
## code to prepare `DATASET` dataset goes here
vs <- utils::read.csv("C:/Users/jevi/OneDrive - Epinion/Documents/GitHub/PollingStationsDK/Geografiske_stamdata.csv",
sep = ";")
vs <- vs %>%
dplyr::select(c(Valgsted.navn,
Valgsted.Id,
KommuneNr)) %>%
dplyr::rename(ps_id = Valgsted.Id) %>%
tibble::tibble()
str(vs)
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "utf8"
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "utf8"
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "latin1"
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "utf8"
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "utf-8"
Encoding(vs$Valgsted.navn)
Encoding(vs$Valgsted.navn) <- "UTF-8"
Encoding(vs$Valgsted.navn)
usethis::use_data(vs, overwrite = TRUE, internal = FALSE)
document()
install.packages("labelled")
install.packages("testthat)
""
)
install.packages("testthat")
library(testthat)
library(devtools)
library(roxygen2)
use_testthat()
use_test()
use_test()
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
class(voters::getPS())
class(voters::getPS())[1]
test_that("output format works", {
expect_equal(class(voters::getPS())[1],
"sf")
})
class(voters::getPS(spatial = FALSE))[1]
df <- voters::getPS(id = TRUE)
library(voters)
df <- voters::getPS(id = TRUE)
df2 <- voters::getPS(id = FALSE)
View(df)
names(df)
"ps_id" %in% names(df)
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS(id = TRUE)),
TRUE)
})
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS(id = FALSE)),
FALSE)
})
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = "yes"),
regexp = "Invalid 'spatial' argument provided. Must be logical")
expect_error(voters::getPS(spatial = 1),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
test_that(
"argument errors work: id", {
expect_error(voters::getPS(id = "yes"),
regexp = "Invalid 'id' argument provided. Must be logical")
expect_error(voters::getPS(id = 1),
regexp = "Invalid 'id' argument provided. Must be logical")
}
)
voters::getPS(id = "yes")
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = "yes"),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = 1),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
voters::getPS(spatial = 1)
expect_error(voters::getPS(spatial = 3),
regexp = "Invalid 'spatial' argument provided. Must be logical")
voters::getPS(spatial = 3)
voters::getPS(spatial = 3)
voters::getPS(spatial = 3)
spatial <- 1
class(spatial) == "numeric")
class(spatial) == "numeric"
spatial <- "aaa"
class(spatial) == "character"
document()
library(devtools)
library(roxygen2)
library(testthat)
1 == TRUE
as.numeric(1) == TRUE
as.numeric(1.1) == TRUE
as.integer(1.1) == TRUE
as.integer(1.8) == TRUE
1 == TRUE
1 == FALSE
0 == FALSE
1 == FALSE
3 == FALSE
install_github("jvieroe/voters")
library(voters)
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = 1),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = 2),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
test_that(
"argument errors work: spatial", {
expect_error(voters::getPS(spatial = 2),
regexp = "Invalid 'spatial' argument provided. Must be logical")
}
)
library(carbonate)
0 == FALSE
0 == TRUE
library(carbonate)
library(carbonate)
x <- carbon$new()
x <- carbon$new()
x$browse()
x <- carbon$new()
x$browse()
0 == FALSE
0 == TRUE
1 == FALSE
1 == TRUE
0 == FALSE
0 == TRUE
1 == FALSE
1 == TRUE
2 == FALSE
2 == TRUE
1.1 == FALSE
1.1 == TRUE
2 == FALSE
2 == TRUE
1.1 == FALSE
1.1 == TRUE
x <- carbon$new()
x$browse()
library(carbonate)
0 == FALSE
0 == TRUE
1 == FALSE
1 == TRUE
2 == FALSE
2 == TRUE
1.1 == FALSE
1.1 == TRUE
x <- carbon$new()
x$browse()
"1" == FALSE
"1" == TRUE
0 == FALSE
0 == TRUE
1 == FALSE
1 == TRUE
x <- carbon$new()
x$browse()
rm(x)
document()
library(devtools)
install.packages("testthat")
install.packages("testthat")
library(devtools)
library(roxygen2)
library(badger)
badger::badge_github_version()
badger::badge_github_version("https://github.com/jvieroe/voters")
badger::badge_github_version("https://github.com/jvieroe/voters", color = dodgerblue)
badger::badge_github_version("https://github.com/jvieroe/voters", color = "dodgerblue")
badger::badge_lifecycle("stable")
install.packages("ggpubr")
devtools::install_github("G-Thomson/Manu")
library(Manu)
library(MetBrewer)
badger::badge_last_commit()
badger::badge_last_commit("https://github.com/jvieroe/voters")
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS()),
TRUE)
})
library(voters)
library(devtools)
library(roxygen2)
library(testthat)
test_that("output format works", {
expect_equal(class(voters::getPS())[1],
"sf")
})
test_that("output format works", {
expect_equal(class(voters::getPS(spatial = TRUE))[1],
"sf")
})
test_that("output format works", {
expect_equal(class(voters::getPS(spatial = FALSE))[1],
"tbl_df")
})
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS()),
TRUE)
})
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS(id = TRUE)),
TRUE)
})
test_that("id argument works", {
expect_equal("ps_id" %in% names(voters::getPS(id = FALSE)),
FALSE)
})
document()
